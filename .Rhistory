1+1
v <- c(1,2,3)
v
typeof(v)
typeof(v[1])
i <- 10
while (i < 20)
{}
i <- 10
while (i < 15)
print(i)
thislist<- list(list(1,23,4,5,6), 7)
thislist[1]
thislist[[1]]
thislist[[1]][[1]]
thislist[[2]]
thislist[[4]][[1]]
thislist[[1]][[3]]
thislist[1]
thislist[1][1]
thislist <- list(1,2,3,4,5,6,7,78,9,10)
thislist[1]
thislist[[1]]
thislist[[1]][1]
thislist[1:5]
print(thislist)
thislist2 <- list(1,2)
append(thislist, thislist2)
thislist <- list(prime = c)
m<- matrix(nrow=2, ncol=3)
m
attributes(m)
dim(m)
dim(m)[1]
m <- matrix
m <- matrix
m <- matrix(c(1,2,3,4,5,6,7,8), ncol = 4, nrow=2)
m
str(m)
x <- c(1,2,3,4,5)
y <- c(6,7,8,9,10)
cbind(x,y)
z <- cbind(x, y)
z
z[1,1]
z[x,1]
z[x]
z[x][1]
z[1][2]
z
z[1,2]
d <- data.frame(x,y)
d
a <- c("True", True)
a <- c(True, True, False)
6>7
a <- c(TRUE, FALSE, TRUE, FALSE, TRUE)
data.frame(x,y,a)
p <- data.frame(x,y,a)
attributes(p)
dim(p)
nrow(df)
nrow(p)
ncol(p)
p[2,2]
names(p) <- c(x,y,z)
length(p)
names(p) <- c("x","y","z")
p
dimnames(p)
colnames(p)
rownames(p)
getcwd()
getwd()
dir()
z<-3
z>3 & z<6
z>3 && z<6
y <- seq(from = -1, to = 7/4, by = 0.000000001)
hist(x, probability=TRUE, breaks=100, ylim=c(0, 1))
samplingHelper <- function(n) {
p <- runif(n, min = 0, max = 1)
generated_sample <- numeric(length(p))  # Initialize the vector
for (i in 1:length(p)) {
if (p[i] >= 0 & p[i] < 1/8) {
generated_sample[i] <- sqrt(8 * p[i]) - 1
}
else if (p[i] >= 1/8 & p[i] <= 1) {
generated_sample[i] <- 0.125 * (-7 + sqrt(7) * sqrt(64 * p[i] - 1))
}
}
return(generated_sample)
}
x <- samplingHelper(99999)
p_density <- function(y) {
f <- numeric(length(y))  # Initialize the vector
for (i in 1:length(y)) {
if (y[i] >= -1 & y[i] <= 1/4) {
f[i] <- y[i]/4 + 1/4
}
else if (y[i] >= 0 & y[i] < 7/4){
f[i] <- (2*y[i])/7 + 1/4
}
}
return (f)
}
hist(x, probability=TRUE, breaks=100, ylim=c(0, 1))
lines(x, p_density(x), col="blue", lwd = 2)
lines(density(x), col="red")
y <- seq(from = -1, to = 7/4, length.out = 100)
y
hist(x, probability=TRUE, breaks=100, ylim=c(0, 1))
lines(y, p_density(y), col="blue", lwd = 2)
lines(density(x), col="red")
samplingHelper <- function(n) {
p <- runif(n, min = 0, max = 1)
generated_sample <- numeric(length(p))  # Initialize the vector
for (i in 1:length(p)) {
if (p[i] >= 0 & p[i] < 1/8) {
generated_sample[i] <- sqrt(8 * p[i]) - 1
}
else if (p[i] >= 1/8 & p[i] <= 1) {
generated_sample[i] <- 0.125 * (-7 + sqrt(7) * sqrt(64 * p[i] - 1))
}
}
return(generated_sample)
}
x <- samplingHelper(99999)
p_density <- function(y) {
f <- numeric(length(y))  # Initialize the vector
for (i in 1:length(y)) {
if (y[i] >= -1 & y[i] <= 1/4) {
f[i] <- y[i]/4 + 1/4
}
else if (y[i] >= 0 & y[i] < 7/4){
f[i] <- (2*y[i])/7 + 1/4
}
else {
f[i] <- 0
}
}
return (f)
}
y <- seq(from = -1, to = 7/4, length.out = 100)
hist(x, probability=TRUE, breaks=100, ylim=c(0, 1))
lines(y, p_density(y), col="blue", lwd = 2)
lines(density(x), col="red")
knitr::opts_chunk$set(echo = TRUE)
# Importing Libraries
library(tidyverse)
library(naniar)
library(visdat)
library(ggplot2)
library(corrplot)
library(randomForest)
library(pROC)
library(fmsb)
library(scales)
library(rpart)
library(dplyr)
library(caret)
library(class)
# Reading Csv file
data_df <- read_csv("Training Data.csv")
# Data Checking
# removing ID column from training data
names(data_df)
data_df1 <- data_df %>% select(-Id)
# Missing variables summary table
miss_var_summary(data_df1)
str(data_df1)
# Visualisation
data_df1 %>%
vis_dat(warn_large_data = FALSE) +
ggplot2::theme(legend.position = "bottom")
# Dividing into categorical and numerical data
numeric_columns <- sapply(data_df1, is.numeric)
categorical_columns <- sapply(data_df1, function(x) !is.numeric(x))
# Number checking
any_negative <- any(data_df1[, numeric_columns] < 0)
# Any numerical column has negative Value
percentage_negative <- sum(any_negative) / length(numeric_columns) * 100
# Create a pie chart with the percentage label and a legend
pie(c(percentage_negative, 100 - percentage_negative),
labels = c(paste("Negative Values: ", round(percentage_negative, 2), "%"),
paste("Psoitive Values", 100 - round(percentage_negative, 2), "%")),
col = c("lightcoral", "skyblue"),
main = "Percentage of Columns with Negative Values",
border = "white"
)
# Add a legend
legend("topright", c("Negative Values", "Non-Negative Values"), fill = c("lightcoral", "skyblue"), bty = "n")
# Checking the distinct values
for ( name in names(data_df1[, categorical_columns])){
print(name)
distinct_values_column <- unique(data_df1[, name])
print(distinct_values_column, n = 400)
}
# Removing [] content
data_df1$CITY <- gsub("\\[.*?\\]", "", data_df1$CITY)
data_df1$STATE <- gsub("\\[.*?\\]", "", data_df1$STATE)
# Individual data checking
# Generate a color palette based on the number of numeric columns
colors <- c("#1f78b4", "#33a02c", "#e31a1c", "#ff7f00", "#6a3d9a")
long_data <- tidyr::gather(data_df1[, numeric_columns],
key = "Variable", value = "Value") %>%
filter(Variable != "Risk_Flag")
# Individual data checking
ggplot(long_data, aes(x = Variable, y = Value, fill = Variable)) +
geom_boxplot(color = "black", size = 0.7, outlier.shape = 16, outlier.size = 2) +
scale_fill_manual(values = colors) +
labs(
title = "Box Plots",
x = "Variable",
y = "Value",
fill = "Variable"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_text(size = 12),
legend.position = "right"
) +
facet_wrap(~Variable, scales = "free_y", ncol = 1) +
scale_y_continuous(labels = scales::comma)
# Numerical columns Correlation matrix
correlation_matrix <- cor(data_df1[, numeric_columns])
label_color <- "black"
transposed_matrix <- t(correlation_matrix)
# Reset font style Correlation Matrix
par(font = 2)
corrplot(
correlation_matrix,
method = "color",
type = "lower",
tl.col = "black",
addCoef.col = "white",
col = colorRampPalette(c("#FEF8E0", "#BC6C25", "lightblue"))(100),
order = "hclust",  # Order variables by hierarchical clustering
addgrid.col = "gray",  # Add gray grid lines
tl.srt = 45,  # Text label rotation angle
tl.cex = 0.8  # Text label size
)
# Reset font style
par(font = 1)
setwd("~/Monash/Semester_2/FIT_5147/Assignment/Assignment_3/Question_1 2")
shiny::runApp()
setwd("~/Downloads/VinayMittal_33613877_code")
runApp()
shiny::runApp('Monash/Semester_2/FIT_5147/Assignment/Assignment_3/VinayMittal_33613877_code')
setwd("~/Monash/Summer_Vacation/GitHub/US-Salary_Range-Industry-Education-Analysis")
runApp('~/Monash/Semester_2/FIT_5147/Assignment/Assignment_3/VinayMittal_33613877_code')
ls -ld /opt/R/4.3.1/lib/R/library
